{
    "data_version": "4.0",
    "references": {
        "reference_data": "http://www.vapidlabs.com/advisory.php?v=189"
    },
    "description": {
        "description_data": "Blind SQL Injection and persistent XSS in Wordpress plugin image-gallery-with-slideshow v1.5.2"
    },
    "data_type": "CVE",
    "affects": {
        "vendor": {
            "vendor_data": [
                {
                    "product": {
                        "product_data": [
                            {
                                "version": {
                                    "version_data": [
                                        {
                                            "version_value": "n/a",
                                            "version_affected": "1.5.2"
                                        }
                                    ]
                                },
                                "product_name": "n/a"
                            }
                        ]
                    },
                    "vendor_name": "http://www.anblik.com/"
                }
            ]
        }
    },
    "CVE_data_meta": {
        "UPDATED": "2017-08-10T14:41Z",
        "CVE_product_name": "https://wordpress.org/plugins/image-gallery-with-slideshow/",
        "ASSIGNER": "larry0@me.com",
        "STATE": "PUBLIC",
        "REQUESTER": "kurt@seifried.org",
        "ID": "CVE-2017-1002011 2017-1002012 2017-1002013 2017-1002014 2017-1002015",
        "DATE_ASSIGNED": "2017-04-01"
    },
    "data_format": "MITRE",
    "problemtype": {
        "problemtype_data": [
            {
                "description": [
                    {
                        "lang": "EN",
                        "value": "CVE-2017-1002011:\r\n\r\nThere is a stored XSS vulnerability via the $value->gallery_name and $value->gallery_description where anyone with privileges to modify or add galleries / images and inject javascript into the database.\r\n\r\n145  <td><a class="row-title" title="Edit" href="<?php echo bloginfo('url');?>/wp-admin/admin.php?page=gallery_with_slideshow&val=view&gid=<?php echo $value->gallery_id;?>"><?php echo $value->gallery_name;?></a></td>\r\n146  <td>&nbsp;<?php echo $value->gallery_description;?></td>\r\n\r\nCVE-2017-1002012:\r\n\r\nIn image-gallery-with-slideshow/admin_setting.php the following snippet of code does not sanitize input via the gid variable before passing it into an SQL statement:\r\n\r\n\r\n173 if($_REQUEST['val'] == 'view')\r\n174 {\r\n175         $path_value = get_combo_path_value();\r\n176    $id = $_REQUEST['gid'];\r\n177         global $wpdb;\r\n178         $table_prefix = $wpdb->prefix;\r\n179         $result = $wpdb->get_results("SELECT ig.gallery_name,ii.image_id,ii.original_name,ii.image_name,ii.gallery_id,ii.image_title,ii.link_url,ii.image_description FROM `".$table_prefix."combo_gallery` AS ig,`".$table_prefix."combo_image` AS ii WHERE ig.gallery_   id=ii.gallery_id AND ii.gallery_id =".$id);\r\n\r\n\r\n255 if($_REQUEST['val'] == 'edit')\r\n256 {\r\n257         $id = $_REQUEST['gid'];\r\n258         global $wpdb;\r\n259        $table_prefix = $wpdb->prefix;\r\n.\r\n.\r\n.\r\n270         $edit_result = $wpdb->get_results("SELECT * FROM `".$table_prefix."combo_gallery` WHERE gallery_id = ".$id);\r\n\r\nCVE-2017-1002013:\r\nBlind SQL Injection via imgid parameter.\r\n\r\n301 if($_REQUEST['val'] == 'imgedit')\r\n302 {\r\n303 $id = $_REQUEST['imgid'];\r\n304         $gid = $_REQUEST['gid'];\r\n305    global $wpdb;\r\n.\r\n.\r\n309         if(isset($_REQUEST['edit_image_submit']))\r\n310         {\r\n.\r\n.\r\n.\r\n318         $edit_img_result = $wpdb->get_results("SELECT * FROM `".$table_prefix."combo_image` WHERE image_id = ".$id);\r\n\r\n\r\n361 if($_REQUEST['gval'] == 'delete')\r\n362 {\r\n363         $id = $_REQUEST['gid'];\r\n364         global $wpdb;\r\n365         $table_prefix = $wpdb->prefix;\r\n366         $info = $_SERVER['DOCUMENT_ROOT'];\r\n367     $path_value = get_combo_path_value();\r\n368         $select_img_query_result = $wpdb->get_results("SELECT * FROM `".$table_prefix."combo_image` WHERE gallery_id=".$id);\r\n\r\n\r\n384 if($_REQUEST['ival'] == 'delete')\r\n385 {\r\n386         $path_value = get_combo_path_value();\r\n387         $id = $_REQUEST['gid'];\r\n388         global $wpdb;\r\n389         $table_prefix = $wpdb->prefix;\r\n390         $info = $_SERVER['DOCUMENT_ROOT'];\r\n391         $select_img_query_result1 = $wpdb->get_results("SELECT * FROM `".$table_prefix."combo_image` WHERE image_id=".$id);\r\n\r\nCVE-2017-1002014:\r\nBlind SQL Injection via gallery_name parameter.\r\n\r\n422 if(isset($_POST['gallery_submit']))\r\n423 {\r\n424         $gallery_name = $_REQUEST['gallery_name'];\r\n425         $insert_query_result = $wpdb->insert($table_prefix.'combo_gallery', array('gallery_name' => $gallery_name,'date' => current_time('mysql')));\r\n426 \r\n\r\nCVE-2017-1002015:\r\nBlind SQL Injection via selectMulGallery parameter.\r\n492 if(isset($_POST['image_submit']))\r\n493 {\r\n494         $gallery_id = $_POST['selectMulGallery'];\r\n495         $update_gallery_query = "UPDATE `".$table_prefix."combo_image` SET gallery_id=".$gallery_id." WHERE gallery_id = '0'";\r\n496         $wpdb->query($update_gallery_query);\r\n"
                    }
                ]
            }
        ]
    }
}
