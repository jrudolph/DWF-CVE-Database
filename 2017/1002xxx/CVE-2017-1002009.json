{
    "data_version": "4.0",
    "references": {
        "reference_data": "http://www.vapidlabs.com/advisory.php?v=188"
    },
    "description": {
        "description_data": "Multiple Unauthenticated blind SQL injections in Wordpress Plugin Membership Simplified v1.58"
    },
    "data_type": "CVE",
    "affects": {
        "vendor": {
            "vendor_data": [
                {
                    "product": {
                        "product_data": [
                            {
                                "version": {
                                    "version_data": [
                                        {
                                            "version_value": "n/a",
                                            "version_affected": "1.58"
                                        }
                                    ]
                                },
                                "product_name": "n/a"
                            }
                        ]
                    },
                    "vendor_name": "http://membership.officeautopilot.com/"
                }
            ]
        }
    },
    "CVE_data_meta": {
        "UPDATED": "2017-08-10T14:41Z",
        "CVE_product_name": "http://membership.officeautopilot.com/get-it-now/",
        "ASSIGNER": "larry0@me.com",
        "STATE": "PUBLIC",
        "REQUESTER": "kurt@seifried.org",
        "ID": "CVE-2017-1002009 2017-1002010",
        "DATE_ASSIGNED": "2017-03-17"
    },
    "data_format": "MITRE",
    "problemtype": {
        "problemtype_data": [
            {
                "description": [
                    {
                        "lang": "EN",
                        "value": "The code in membership-simplified-for-oap-members-only/updateDB.php is vulnerable to blind SQL injection because it doesn't sanitize user input via any of the POST requests being passed into the SQL query.  Also it doesn't check that a user is authorized to make updates to the database.\r\n\r\n  2 require_once("../../../wp-config.php");\r\n  3 global $wpdb;\r\n  4 $table_name = $wpdb->prefix . "download_listing";\r\n  5 $media_table_name = $wpdb->prefix . "media_listing";\r\n  6 $action = $_POST['action'];\r\n  7 $updateRecordsArray = $_POST['recordsArray'];\r\n  8 $mediaupdateRecordsArray = $_POST['mediaRecordsArray'];\r\n\r\nCVE-2017-1002009:\r\nI chose to test the SQL injection against the delete action as it was the most straightforward injection point.\r\n\r\n 34 if($action == 'delete') {\r\n 35         $upload_base_dir = wp_upload_dir();\r\n 36         $upload_dir =  $upload_base_dir['basedir'];\r\n 37         $path= $upload_dir.'/membership-simplified-for-oap-members-only/';\r\n 38         $fileName = $wpdb->get_row("select fileName from $table_name where recordId= ".$_POST['recordId']."");\r\n 39         @unlink($path.$fileName->fileName);\r\n 40         $query= "delete from $table_name where recordId= '".$_POST['recordId']."' ";\r\n 41         $wpdb->query($query) or die('Error, insert query failed');\r\n 42 \r\n 43 }\r\n\r\nCVE-2017-1002010:\r\n\r\n 56 if($action == 'delete_media') {\r\n 57         $upload_base_dir = wp_upload_dir();\r\n 58         $upload_dir = $upload_base_dir['basedir'];\r\n 59         $path = $upload_dir.'/membership-simplified-for-oap-members-only/';\r\n 60 $fileName = $wpdb->get_row("select fileName from $media_table_name where recordId= ".$_POST['recordId']."");\r\n 61         //@unlink($path.$fileName->fileName);\r\n 62         $query= "delete from $media_table_name where recordId= '".$_POST['recordID']."' ";\r\n 65         $wpdb->query($query) or die($query);"
                    }
                ]
            }
        ]
    }
}
